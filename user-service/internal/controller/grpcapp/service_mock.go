// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go
//
// Generated by this command:
//
//	mockgen -source=grpc.go -destination=service_mock.go
//

// Package mock_grpcapp is a generated GoMock package.
package grpcapp

import (
	context "context"
	reflect "reflect"
	entity "userService/internal/entity"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockService) CreateProfile(ctx context.Context, userID uuid.UUID, username, firstname, middlename, lastname, phoneNumber, email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, userID, username, firstname, middlename, lastname, phoneNumber, email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockServiceMockRecorder) CreateProfile(ctx, userID, username, firstname, middlename, lastname, phoneNumber, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockService)(nil).CreateProfile), ctx, userID, username, firstname, middlename, lastname, phoneNumber, email)
}

// DeleteProfile mocks base method.
func (m *MockService) DeleteProfile(ctx context.Context, profileID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", ctx, profileID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockServiceMockRecorder) DeleteProfile(ctx, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockService)(nil).DeleteProfile), ctx, profileID)
}

// GetProfile mocks base method.
func (m *MockService) GetProfile(ctx context.Context, profileID uuid.UUID) (*entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, profileID)
	ret0, _ := ret[0].(*entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockServiceMockRecorder) GetProfile(ctx, profileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockService)(nil).GetProfile), ctx, profileID)
}

// UpdateProfile mocks base method.
func (m *MockService) UpdateProfile(ctx context.Context, profileID uuid.UUID, username, firstname, middlename, lastname, phoneNumber, email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, profileID, username, firstname, middlename, lastname, phoneNumber, email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockServiceMockRecorder) UpdateProfile(ctx, profileID, username, firstname, middlename, lastname, phoneNumber, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockService)(nil).UpdateProfile), ctx, profileID, username, firstname, middlename, lastname, phoneNumber, email)
}
